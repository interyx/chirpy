// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens(token, created_at, updated_at, user_id, expires_at)
VALUES ($1, $2, $3, $4, $5)
  RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getTokenByUserID = `-- name: GetTokenByUserID :one
SELECT refresh_tokens.token FROM refresh_tokens
WHERE refresh_tokens.user_id = (
  SELECT users.id FROM users
  INNER JOIN refresh_tokens on refresh_tokens.user_id = users.id
  WHERE users.id = $1
)
`

func (q *Queries) GetTokenByUserID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUserID, id)
	var token string
	err := row.Scan(&token)
	return token, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT id, created_at, updated_at, email, hashed_password FROM users
WHERE users.id = (
  SELECT user_id FROM refresh_tokens
  INNER JOIN users on user_id = users.id
  WHERE refresh_tokens.token = $1
)
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
SET updated_at = $1, revoked_at = $2
WHERE token = $3
`

type RevokeTokenParams struct {
	UpdatedAt time.Time    `json:"updated_at"`
	RevokedAt sql.NullTime `json:"revoked_at"`
	Token     string       `json:"token"`
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.UpdatedAt, arg.RevokedAt, arg.Token)
	return err
}
